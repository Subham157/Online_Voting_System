#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

void display();
void add_voter();
void admin_panel();
void cast_vote();
int search(const char ad[]);
void winner();
int verify(const char ad[]);

typedef struct voter_information {
    char aadhar[12];  // Adjusted size to accommodate Aadhar number length
    char namev[50];   // Increased size for name
    char DOB[11];     // Adjusted size for date format DD-MM-YYYY
    bool vc;
    struct voter_information *next;
} node;

int vote1 = 0;
int vote2 = 0;
int vote3 = 0;
int vote4 = 0;

node *start = NULL;

int opt, pass;

node* get_voter() {
    node *new = (node*)malloc(sizeof(node));
    if (new == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    printf("Enter Aadhar of voter: ");
    scanf("%s", new->aadhar);
    printf("Enter name of voter: ");
    scanf("%s", new->namev);
    printf("Enter date of birth in DD-MM-YYYY format: ");
    scanf("%s", new->DOB);
    new->vc = false;
    new->next = NULL;
    return new;
}

int main() {
    while (1) {
        printf("\n\n\n");
        printf("\t****** WELCOME TO THE ONLINE VOTING PORTAL ******\n");
        printf("\t***************** MAIN MENU *****************\n");
        printf("\t1. CAST VOTE\n");
        printf("\t2. ADMIN PANEL\n");
        printf("\t3. ELECTION RESULTS\n");
        printf("\t4. EXIT\n");
        printf("Enter your choice: ");
        scanf("%d", &opt);
        switch (opt) {
            case 1:
                cast_vote();
                break;
            case 2:
                admin_panel();
                break;
            case 3:
                winner();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice, please try again.\n");
        }
    }
    return 0;
}

void admin_panel() {
    printf("\n\n\n\n");
    printf("Enter Your Password To Unlock The Admin Panel: ");
    scanf("%d", &pass);
    if (pass == 1234) {
        printf("\n********** ADMIN PANEL *********\n");
        printf("1. UPDATE VOTER LIST\n");
        printf("2. DISPLAY VOTER LIST\n");
        printf("3. MAIN MENU\n");
        printf("Enter your choice: ");
        scanf("%d", &opt);
        switch (opt) {
            case 1:
                add_voter();
                break;
            case 2:
                display();
                break;
            case 3:
                break;
            default:
                printf("Invalid choice, returning to main menu.\n");
        }
    } else {
        printf("INVALID PASSWORD\n\n");
    }
}

void add_voter() {
    node *new = get_voter();
    if (start == NULL) {
        start = new;
    } else {
        node *temp = start;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new;
    }
    printf("Voter added successfully\n");
}

void display() {
    node *temp = start;
    if (temp == NULL) {
        printf("No voters to display.\n");
        return;
    }
    while (temp != NULL) {
        printf("\nVOTER DETAILS\n");
        printf("Name: %s\n", temp->namev);
        printf("Aadhar: %s\n", temp->aadhar);
        printf("DOB: %s\n", temp->DOB);
        printf("Vote Casted: %s\n", temp->vc ? "Yes" : "No");
        temp = temp->next;
    }
}

void cast_vote() {
    char ad[12];
    int cc = 0;

    printf("VOTE CAN BE CASTED ONLY ONCE AND IF YOU ARE PRE-REGISTERED IN VOTER LIST\n");
    printf("ENTER YOUR AADHAR TO VERIFY: ");
    scanf("%s", ad);

    if (search(ad)) {
        printf("VOTER FOUND\n");
        if (verify(ad)) {
            printf("\nLIST OF CANDIDATES ARE:\n");
            printf("1. Narendra Modi\n");
            printf("2. Rahul Gandhi\n");
            printf("3. Basavaraj Bommai\n");
            printf("4. Arvind Kejriwal\n");
            printf("Enter your choice: ");
            scanf("%d", &cc);
            switch (cc) {
                case 1:
                    vote1++;
                    break;
                case 2:
                    vote2++;
                    break;
                case 3:
                    vote3++;
                    break;
                case 4:
                    vote4++;
                    break;
                default:
                    printf("Invalid choice, vote not counted.\n");
                    return;
            }
            printf("You have successfully casted your vote\n");
        } else {
            printf("VOTE HAS ALREADY BEEN CASTED\n");
        }
    } else {
        printf("VOTER NOT FOUND\n");
        printf("PLEASE REGISTER YOUR NAME IN VOTER LIST FIRST\n");
    }
}

int search(const char ad[]) {
    node *temp = start;
    printf("SEARCHING IN THE VOTER LIST...\n");
    while (temp != NULL) {
        if (strcmp(temp->aadhar, ad) == 0) {
            return 1;
        }
        temp = temp->next;
    }
    return 0;
}

int verify(const char ad[]) {
    node *temp = start;
    while (temp != NULL) {
        if (strcmp(temp->aadhar, ad) == 0) {
            if (!temp->vc) {
                temp->vc = true;
                return 1;
            }
            return 0;
        }
        temp = temp->next;
    }
    return 0;
}

void winner() {
    if (vote1 > vote2 && vote1 > vote3 && vote1 > vote4) {
        printf("Winner is Narendra Modi with %d votes\n", vote1);
    } else if (vote2 > vote1 && vote2 > vote3 && vote2 > vote4) {
        printf("Winner is Rahul Gandhi with %d votes\n", vote2);
    } else if (vote3 > vote1 && vote3 > vote2 && vote3 > vote4) {
        printf("Winner is Basavaraj Bommai with %d votes\n", vote3);
    } else if (vote4 > vote1 && vote4 > vote2 && vote4 > vote3) {
        printf("Winner is Arvind Kejriwal with %d votes\n", vote4);
    } else {
        printf("NO WINNER, THERE IS A TIE\n");
    }
}
